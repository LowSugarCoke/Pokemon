#pragma once
#include <iostream>
#include <string>
#include <vector>

#include "Move.h"

#include "DAMAGE_TYPE.h"
#include "STATUS.h"
#include "TYPE.h"

#include "PokemonStat.h"

using namespace std;

const float NOEFCT = 0;
const float LOEFCT = 0.5;
const float NMEFCT = 1;
const float SOEFCT = 2;

const float EffectivenessRate[18][18] = {
	{ NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, NOEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT},
	{ NMEFCT, LOEFCT, LOEFCT, NMEFCT, SOEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, LOEFCT, NMEFCT, SOEFCT, NMEFCT},
	{ NMEFCT, SOEFCT, LOEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT},
	{ NMEFCT, NMEFCT, SOEFCT, LOEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, NOEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT},
	{ NMEFCT, LOEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, LOEFCT, SOEFCT, LOEFCT, NMEFCT, LOEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, LOEFCT, NMEFCT},
	{ NMEFCT, LOEFCT, LOEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, NMEFCT, SOEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT},
	{ SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, LOEFCT, LOEFCT, LOEFCT, SOEFCT, NOEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT},
	{ NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, LOEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, LOEFCT, NMEFCT, NMEFCT, NOEFCT, SOEFCT},
	{ NMEFCT, SOEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NOEFCT, NMEFCT, LOEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT},
	{ NMEFCT, NMEFCT, NMEFCT, LOEFCT, SOEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT},
	{ NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, SOEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NOEFCT, LOEFCT, NMEFCT},
	{ NMEFCT, LOEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, LOEFCT, NMEFCT, LOEFCT, SOEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT, SOEFCT, LOEFCT, LOEFCT},
	{ NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, LOEFCT, SOEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT},
	{ NOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT},
	{ NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NOEFCT},
	{ NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, LOEFCT, NMEFCT, LOEFCT},
	{ NMEFCT, LOEFCT, LOEFCT, LOEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, NMEFCT, NMEFCT, NMEFCT, LOEFCT, SOEFCT},
	{ NMEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, LOEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, NMEFCT, SOEFCT, SOEFCT, LOEFCT, NMEFCT}
};

class Pokemon {
protected:
	string name;
	vector<TYPE> types;
	PokemonStat stat;
	vector<Move> moves; //ordered
	STATUS status;

public:
	Pokemon() {}
	Pokemon(string name, vector<TYPE> types, PokemonStat stat);

	// check if the pokemon is dead
	bool isDead();

	// getters
	string getName();
	vector<TYPE> getTypes();
	PokemonStat getStat();

	// check validity
	bool hasType(TYPE);
	bool hasMove(Move);
	bool hasCritical(Move); // will be implemented in attack()
	bool hasStab(Move);

	void attack(Pokemon enemy, Move move); //use the damage calculation formula
	//// status
	//void statusDamage();
	////
	//static bool isCritical();
	//static bool isMiss(Move move);

	////operator overloading
	//friend ostream& operator<<(ostream& out, Pokemon& rhs);
	//friend istream& operator>>(istream& in, Pokemon& rhs);
};